# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: VRCX_ZHTW

on:
  - workflow_dispatch

jobs:
  build_dotnet:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Nuget.exe
      uses: nuget/setup-nuget@v1
    - name: Restore packages
      run: nuget restore VRCX.sln
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build with MSBuild
      run: msbuild VRCX.sln -p:Configuration=Release -p:Platform=x64
    - uses: actions/upload-artifact@v3
      with:
        name: vrcx
        path: bin/x64/Release
     
  build_node:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: html

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Restore dependencies
      run: npm ci
    - name: Lint
      run: npm run lint
    - name: Build
      run: npm run production
    - name: Fix folder structure
      id: fix-folders
      run: |
        mkdir upload
        mv dist upload/html
    - uses: actions/upload-artifact@v3
      with:
        name: vrcx
        path: html/upload
